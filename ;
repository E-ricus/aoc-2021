use crate::runner::{Parse, RunMut};

use anyhow::Result;

pub struct Day6 {}

impl Parse<Vec<usize>> for Day6 {
    fn parse_input(input: &str) -> Result<Vec<usize>> {
        Ok(input
            .trim()
            .split(',')
            .filter_map(|n| n.parse::<usize>().ok())
            .fold([0; 9], |mut map, n| {
                map[n] += 1;
                map
            })
            .to_vec())
    }
}

impl RunMut<Vec<usize>, usize> for Day6 {
    fn part_one(input: &mut Vec<usize>) -> Result<usize> {
        count_fish(&mut input.clone(), 80)
    }

    fn part_two(input: &mut Vec<usize>) -> Result<usize> {
        count_fish(input, 256)
    }
}

// First attemp, not efficient
#[allow(dead_code)]
fn change_fish(input: &mut Vec<u16>, days: u16) {
    for _ in 0..days {
        let mut new_fishes = Vec::new();
        for fish in input.iter_mut() {
            match fish {
                0 => {
                    *fish = 6;
                    new_fishes.push(8);
                }
                _ => *fish -= 1,
            }
        }
        if !new_fishes.is_empty() {
            input.append(&mut new_fishes);
        }
    }
}

fn count_fish(input: &mut [usize], days: usize) -> Result<usize> {
    (1..days).for_each(|day| {
        // TODO: Fully understand
        let per_day = (day + 7) % 9;
        let new_borns = day % 9;
        input[per_day] += input[new_borns];
    });

    Ok(input.iter().sum::<usize>())
}
fn count_fish2(school: &mut [usize], days: usize) -> usize {
    (0..8).cycle().take(days).for_each(|_| {
        school.rotate_left(1);
        school[6] += school[8];
    });

    school.iter().sum()
}

#[cfg(test)]
mod tests {
    use super::*;

    const INPUT: &str = include_str!("../inputs/day6.test");

    #[test]
    fn test_part_one() -> Result<()> {
        let mut input = Day6::parse_input(INPUT)?;
        let result = Day6::part_one(&mut input)?;
        assert_eq!(result, 5934);
        Ok(())
    }

    #[test]
    fn test_part_two() -> Result<()> {
        let mut input = Day6::parse_input(INPUT)?;
        let result = Day6::part_two(&mut input)?;
        assert_eq!(result, 26984457539);
        Ok(())
    }

    #[test]
    fn test_count_fish() -> Result<()> {
        let mut input = Day6::parse_input(INPUT)?;
        let count = count_fish(&mut input, 2)?;
        assert_eq!(count, 6);
        let mut input = Day6::parse_input(INPUT)?;
        let count = count_fish(&mut input, 3)?;
        assert_eq!(count, 7);
        let mut input = Day6::parse_input(INPUT)?;
        let count = count_fish(&mut input.clone(), 18)?;
        let count2 = count_fish2(&mut input, 18);
        println!("{},{}", count, count2);
        assert_eq!(count, 26);
        Ok(())
    }
}
